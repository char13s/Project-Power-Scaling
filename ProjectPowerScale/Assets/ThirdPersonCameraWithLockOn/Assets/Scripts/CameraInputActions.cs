//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/ThirdPersonCameraWithLockOn/Assets/Scripts/CameraInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraInputActions"",
    ""maps"": [
        {
            ""name"": ""ThirdPersonCamera"",
            ""id"": ""0f9f64d4-a676-47c9-8e2c-31952788a5be"",
            ""actions"": [
                {
                    ""name"": ""CamReset"",
                    ""type"": ""Button"",
                    ""id"": ""17ab9476-43d3-44f0-87dd-948fe6c4dd6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockOn"",
                    ""type"": ""Button"",
                    ""id"": ""d007046d-e4c3-4525-b34d-acc21e0d7574"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeTargets"",
                    ""type"": ""Button"",
                    ""id"": ""2df158e6-0354-439b-9925-09f0e54fc8da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousTarget"",
                    ""type"": ""Button"",
                    ""id"": ""67c7b766-74c5-4af2-923e-b340e99af93c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Orbit"",
                    ""type"": ""PassThrough"",
                    ""id"": ""955bd303-7919-461f-88ac-21f324e517df"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""69aabf9d-807c-4b21-8291-196f0a914ee0"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""CamReset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ceb6317c-d24d-4d20-ae34-8224359f30d9"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CamReset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ca92a2e-f026-46fd-90b2-a119b9556a16"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""LockOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b836bf55-9765-41d6-9d6d-d306cef55c00"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LockOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86ae7420-3d00-4378-9652-b851455ca7b5"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""ChangeTargets"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8ef057a-35f4-40a6-8810-7336590e2258"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ChangeTargets"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""920f6800-54af-4a61-87b0-9910ad4fe6c6"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.05,y=0.05)"",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Orbit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0fbbb80-a2bc-4929-85a7-b722ff724bd6"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Orbit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ead5d8b-986f-4c7c-ab8b-329f4a69735f"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""PreviousTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ThirdPersonCamera
        m_ThirdPersonCamera = asset.FindActionMap("ThirdPersonCamera", throwIfNotFound: true);
        m_ThirdPersonCamera_CamReset = m_ThirdPersonCamera.FindAction("CamReset", throwIfNotFound: true);
        m_ThirdPersonCamera_LockOn = m_ThirdPersonCamera.FindAction("LockOn", throwIfNotFound: true);
        m_ThirdPersonCamera_ChangeTargets = m_ThirdPersonCamera.FindAction("ChangeTargets", throwIfNotFound: true);
        m_ThirdPersonCamera_PreviousTarget = m_ThirdPersonCamera.FindAction("PreviousTarget", throwIfNotFound: true);
        m_ThirdPersonCamera_Orbit = m_ThirdPersonCamera.FindAction("Orbit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ThirdPersonCamera
    private readonly InputActionMap m_ThirdPersonCamera;
    private IThirdPersonCameraActions m_ThirdPersonCameraActionsCallbackInterface;
    private readonly InputAction m_ThirdPersonCamera_CamReset;
    private readonly InputAction m_ThirdPersonCamera_LockOn;
    private readonly InputAction m_ThirdPersonCamera_ChangeTargets;
    private readonly InputAction m_ThirdPersonCamera_PreviousTarget;
    private readonly InputAction m_ThirdPersonCamera_Orbit;
    public struct ThirdPersonCameraActions
    {
        private @CameraInputActions m_Wrapper;
        public ThirdPersonCameraActions(@CameraInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @CamReset => m_Wrapper.m_ThirdPersonCamera_CamReset;
        public InputAction @LockOn => m_Wrapper.m_ThirdPersonCamera_LockOn;
        public InputAction @ChangeTargets => m_Wrapper.m_ThirdPersonCamera_ChangeTargets;
        public InputAction @PreviousTarget => m_Wrapper.m_ThirdPersonCamera_PreviousTarget;
        public InputAction @Orbit => m_Wrapper.m_ThirdPersonCamera_Orbit;
        public InputActionMap Get() { return m_Wrapper.m_ThirdPersonCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ThirdPersonCameraActions set) { return set.Get(); }
        public void SetCallbacks(IThirdPersonCameraActions instance)
        {
            if (m_Wrapper.m_ThirdPersonCameraActionsCallbackInterface != null)
            {
                @CamReset.started -= m_Wrapper.m_ThirdPersonCameraActionsCallbackInterface.OnCamReset;
                @CamReset.performed -= m_Wrapper.m_ThirdPersonCameraActionsCallbackInterface.OnCamReset;
                @CamReset.canceled -= m_Wrapper.m_ThirdPersonCameraActionsCallbackInterface.OnCamReset;
                @LockOn.started -= m_Wrapper.m_ThirdPersonCameraActionsCallbackInterface.OnLockOn;
                @LockOn.performed -= m_Wrapper.m_ThirdPersonCameraActionsCallbackInterface.OnLockOn;
                @LockOn.canceled -= m_Wrapper.m_ThirdPersonCameraActionsCallbackInterface.OnLockOn;
                @ChangeTargets.started -= m_Wrapper.m_ThirdPersonCameraActionsCallbackInterface.OnChangeTargets;
                @ChangeTargets.performed -= m_Wrapper.m_ThirdPersonCameraActionsCallbackInterface.OnChangeTargets;
                @ChangeTargets.canceled -= m_Wrapper.m_ThirdPersonCameraActionsCallbackInterface.OnChangeTargets;
                @PreviousTarget.started -= m_Wrapper.m_ThirdPersonCameraActionsCallbackInterface.OnPreviousTarget;
                @PreviousTarget.performed -= m_Wrapper.m_ThirdPersonCameraActionsCallbackInterface.OnPreviousTarget;
                @PreviousTarget.canceled -= m_Wrapper.m_ThirdPersonCameraActionsCallbackInterface.OnPreviousTarget;
                @Orbit.started -= m_Wrapper.m_ThirdPersonCameraActionsCallbackInterface.OnOrbit;
                @Orbit.performed -= m_Wrapper.m_ThirdPersonCameraActionsCallbackInterface.OnOrbit;
                @Orbit.canceled -= m_Wrapper.m_ThirdPersonCameraActionsCallbackInterface.OnOrbit;
            }
            m_Wrapper.m_ThirdPersonCameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CamReset.started += instance.OnCamReset;
                @CamReset.performed += instance.OnCamReset;
                @CamReset.canceled += instance.OnCamReset;
                @LockOn.started += instance.OnLockOn;
                @LockOn.performed += instance.OnLockOn;
                @LockOn.canceled += instance.OnLockOn;
                @ChangeTargets.started += instance.OnChangeTargets;
                @ChangeTargets.performed += instance.OnChangeTargets;
                @ChangeTargets.canceled += instance.OnChangeTargets;
                @PreviousTarget.started += instance.OnPreviousTarget;
                @PreviousTarget.performed += instance.OnPreviousTarget;
                @PreviousTarget.canceled += instance.OnPreviousTarget;
                @Orbit.started += instance.OnOrbit;
                @Orbit.performed += instance.OnOrbit;
                @Orbit.canceled += instance.OnOrbit;
            }
        }
    }
    public ThirdPersonCameraActions @ThirdPersonCamera => new ThirdPersonCameraActions(this);
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IThirdPersonCameraActions
    {
        void OnCamReset(InputAction.CallbackContext context);
        void OnLockOn(InputAction.CallbackContext context);
        void OnChangeTargets(InputAction.CallbackContext context);
        void OnPreviousTarget(InputAction.CallbackContext context);
        void OnOrbit(InputAction.CallbackContext context);
    }
}
